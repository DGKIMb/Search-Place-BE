spring:
  application:
    name: SearchSpace
  jpa:
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
        default_batch_fetch_size: 100
    open-in-view: true
  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT}
            client-secret: ${KAKAO_SECRET}
            redirect-uri: http://localhost:80/login/oauth2/code/kakao
            client-authentication-method: client_secret_post # kakao는 인증 토큰 발급 요청 메서드가 post이다. (최근 버전에는 작성 방법이 이렇게 바뀌었다.)
            authorization-grant-type: authorization_code
            scope: # kakao 개인 정보 동의 항목 설정의 ID 값
              - profile_nickname
              - profile_image
              - account_email
            client-name: kakao
        # kakao provider 설정
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id # 유저 정보 조회 시 반환되는 최상위 필드명으로 해야 한다.
  jwt:
    secret: ${JWT_SECRET_KEY}
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
      enabled: true

springdoc:
  packages-to-scan: nomad.searchspace.domain
  default-consumes-media-type: application/json;
  default-produces-media-type: application/json;
  show-actuator: true
  swagger-ui:
    path: /api/docs
    disable-swagger-default-url: true
    display-request-duration: true
    operations-sorter: method
    tags-sorter: alpha
    default-model-expand-depth: 2

cloud:
  aws:
    s3:
     bucket: search-space-bucket
    region:
      static: ap-northeast-2
      auto: false
    stack:
      auto: false
    credentials:
      accessKey: ${AWS_ACCESS_KEY}
      secretKey: ${AWS_SECRET_KEY}
